// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: v1/pkg/contract/service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FileManagerClient is the client API for FileManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagerClient interface {
	CreateFolder(ctx context.Context, in *CreateFolderReq, opts ...grpc.CallOption) (*StandardResponse, error)
	RenameFolder(ctx context.Context, in *RenameFolderReq, opts ...grpc.CallOption) (*StandardResponse, error)
	DeleteFolder(ctx context.Context, in *DeleteFolderReq, opts ...grpc.CallOption) (*StandardResponse, error)
	RecoverFolder(ctx context.Context, in *RecoverFolderReq, opts ...grpc.CallOption) (*StandardResponse, error)
	GetDirSchema(ctx context.Context, in *GetDirSchemaReq, opts ...grpc.CallOption) (*GetDirSchemaResp, error)
	GetFolder(ctx context.Context, in *GetFolderReq, opts ...grpc.CallOption) (*GetFolderResp, error)
	SaveFile(ctx context.Context, in *SaveFileReq, opts ...grpc.CallOption) (*StandardResponse, error)
	RenameFile(ctx context.Context, in *RenameFileReq, opts ...grpc.CallOption) (*StandardResponse, error)
	DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*StandardResponse, error)
	RecoverFile(ctx context.Context, in *RecoverFileReq, opts ...grpc.CallOption) (*StandardResponse, error)
	GetFile(ctx context.Context, in *GetFileReq, opts ...grpc.CallOption) (*GetFileResp, error)
}

type fileManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagerClient(cc grpc.ClientConnInterface) FileManagerClient {
	return &fileManagerClient{cc}
}

func (c *fileManagerClient) CreateFolder(ctx context.Context, in *CreateFolderReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.FileManager/CreateFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) RenameFolder(ctx context.Context, in *RenameFolderReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.FileManager/RenameFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) DeleteFolder(ctx context.Context, in *DeleteFolderReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.FileManager/DeleteFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) RecoverFolder(ctx context.Context, in *RecoverFolderReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.FileManager/RecoverFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) GetDirSchema(ctx context.Context, in *GetDirSchemaReq, opts ...grpc.CallOption) (*GetDirSchemaResp, error) {
	out := new(GetDirSchemaResp)
	err := c.cc.Invoke(ctx, "/v1.FileManager/GetDirSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) GetFolder(ctx context.Context, in *GetFolderReq, opts ...grpc.CallOption) (*GetFolderResp, error) {
	out := new(GetFolderResp)
	err := c.cc.Invoke(ctx, "/v1.FileManager/GetFolder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) SaveFile(ctx context.Context, in *SaveFileReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.FileManager/SaveFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) RenameFile(ctx context.Context, in *RenameFileReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.FileManager/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) DeleteFile(ctx context.Context, in *DeleteFileReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.FileManager/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) RecoverFile(ctx context.Context, in *RecoverFileReq, opts ...grpc.CallOption) (*StandardResponse, error) {
	out := new(StandardResponse)
	err := c.cc.Invoke(ctx, "/v1.FileManager/RecoverFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagerClient) GetFile(ctx context.Context, in *GetFileReq, opts ...grpc.CallOption) (*GetFileResp, error) {
	out := new(GetFileResp)
	err := c.cc.Invoke(ctx, "/v1.FileManager/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagerServer is the server API for FileManager service.
// All implementations must embed UnimplementedFileManagerServer
// for forward compatibility
type FileManagerServer interface {
	CreateFolder(context.Context, *CreateFolderReq) (*StandardResponse, error)
	RenameFolder(context.Context, *RenameFolderReq) (*StandardResponse, error)
	DeleteFolder(context.Context, *DeleteFolderReq) (*StandardResponse, error)
	RecoverFolder(context.Context, *RecoverFolderReq) (*StandardResponse, error)
	GetDirSchema(context.Context, *GetDirSchemaReq) (*GetDirSchemaResp, error)
	GetFolder(context.Context, *GetFolderReq) (*GetFolderResp, error)
	SaveFile(context.Context, *SaveFileReq) (*StandardResponse, error)
	RenameFile(context.Context, *RenameFileReq) (*StandardResponse, error)
	DeleteFile(context.Context, *DeleteFileReq) (*StandardResponse, error)
	RecoverFile(context.Context, *RecoverFileReq) (*StandardResponse, error)
	GetFile(context.Context, *GetFileReq) (*GetFileResp, error)
	mustEmbedUnimplementedFileManagerServer()
}

// UnimplementedFileManagerServer must be embedded to have forward compatible implementations.
type UnimplementedFileManagerServer struct {
}

func (UnimplementedFileManagerServer) CreateFolder(context.Context, *CreateFolderReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFolder not implemented")
}
func (UnimplementedFileManagerServer) RenameFolder(context.Context, *RenameFolderReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFolder not implemented")
}
func (UnimplementedFileManagerServer) DeleteFolder(context.Context, *DeleteFolderReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFolder not implemented")
}
func (UnimplementedFileManagerServer) RecoverFolder(context.Context, *RecoverFolderReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverFolder not implemented")
}
func (UnimplementedFileManagerServer) GetDirSchema(context.Context, *GetDirSchemaReq) (*GetDirSchemaResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirSchema not implemented")
}
func (UnimplementedFileManagerServer) GetFolder(context.Context, *GetFolderReq) (*GetFolderResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFolder not implemented")
}
func (UnimplementedFileManagerServer) SaveFile(context.Context, *SaveFileReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFile not implemented")
}
func (UnimplementedFileManagerServer) RenameFile(context.Context, *RenameFileReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedFileManagerServer) DeleteFile(context.Context, *DeleteFileReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedFileManagerServer) RecoverFile(context.Context, *RecoverFileReq) (*StandardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecoverFile not implemented")
}
func (UnimplementedFileManagerServer) GetFile(context.Context, *GetFileReq) (*GetFileResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedFileManagerServer) mustEmbedUnimplementedFileManagerServer() {}

// UnsafeFileManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagerServer will
// result in compilation errors.
type UnsafeFileManagerServer interface {
	mustEmbedUnimplementedFileManagerServer()
}

func RegisterFileManagerServer(s grpc.ServiceRegistrar, srv FileManagerServer) {
	s.RegisterService(&FileManager_ServiceDesc, srv)
}

func _FileManager_CreateFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).CreateFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/CreateFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).CreateFolder(ctx, req.(*CreateFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_RenameFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).RenameFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/RenameFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).RenameFolder(ctx, req.(*RenameFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_DeleteFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).DeleteFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/DeleteFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).DeleteFolder(ctx, req.(*DeleteFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_RecoverFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).RecoverFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/RecoverFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).RecoverFolder(ctx, req.(*RecoverFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_GetDirSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDirSchemaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).GetDirSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/GetDirSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).GetDirSchema(ctx, req.(*GetDirSchemaReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_GetFolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFolderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).GetFolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/GetFolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).GetFolder(ctx, req.(*GetFolderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_SaveFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).SaveFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/SaveFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).SaveFile(ctx, req.(*SaveFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).RenameFile(ctx, req.(*RenameFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).DeleteFile(ctx, req.(*DeleteFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_RecoverFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecoverFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).RecoverFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/RecoverFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).RecoverFile(ctx, req.(*RecoverFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManager_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagerServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.FileManager/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagerServer).GetFile(ctx, req.(*GetFileReq))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManager_ServiceDesc is the grpc.ServiceDesc for FileManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.FileManager",
	HandlerType: (*FileManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFolder",
			Handler:    _FileManager_CreateFolder_Handler,
		},
		{
			MethodName: "RenameFolder",
			Handler:    _FileManager_RenameFolder_Handler,
		},
		{
			MethodName: "DeleteFolder",
			Handler:    _FileManager_DeleteFolder_Handler,
		},
		{
			MethodName: "RecoverFolder",
			Handler:    _FileManager_RecoverFolder_Handler,
		},
		{
			MethodName: "GetDirSchema",
			Handler:    _FileManager_GetDirSchema_Handler,
		},
		{
			MethodName: "GetFolder",
			Handler:    _FileManager_GetFolder_Handler,
		},
		{
			MethodName: "SaveFile",
			Handler:    _FileManager_SaveFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _FileManager_RenameFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _FileManager_DeleteFile_Handler,
		},
		{
			MethodName: "RecoverFile",
			Handler:    _FileManager_RecoverFile_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _FileManager_GetFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/pkg/contract/service.proto",
}
