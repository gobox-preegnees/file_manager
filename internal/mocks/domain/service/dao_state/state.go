// Code generated by MockGen. DO NOT EDIT.
// Source: state.go

// Package dao_state is a generated GoMock package.
package dao_state

import (
	context "context"
	reflect "reflect"

	repo "github.com/gobox-preegnees/file_manager/internal/adapters/dao"
	entity "github.com/gobox-preegnees/file_manager/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIDaoState is a mock of IDaoState interface.
type MockIDaoState struct {
	ctrl     *gomock.Controller
	recorder *MockIDaoStateMockRecorder
}

// MockIDaoStateMockRecorder is the mock recorder for MockIDaoState.
type MockIDaoStateMockRecorder struct {
	mock *MockIDaoState
}

// NewMockIDaoState creates a new mock instance.
func NewMockIDaoState(ctrl *gomock.Controller) *MockIDaoState {
	mock := &MockIDaoState{ctrl: ctrl}
	mock.recorder = &MockIDaoStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDaoState) EXPECT() *MockIDaoStateMockRecorder {
	return m.recorder
}

// SetState mocks base method.
func (m *MockIDaoState) SetState(ctx context.Context, setStateReqDTO repo.SetStateReqDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetState", ctx, setStateReqDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetState indicates an expected call of SetState.
func (mr *MockIDaoStateMockRecorder) SetState(ctx, setStateReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockIDaoState)(nil).SetState), ctx, setStateReqDTO)
}

// MockIServiceMessageState is a mock of IServiceMessageState interface.
type MockIServiceMessageState struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMessageStateMockRecorder
}

// MockIServiceMessageStateMockRecorder is the mock recorder for MockIServiceMessageState.
type MockIServiceMessageStateMockRecorder struct {
	mock *MockIServiceMessageState
}

// NewMockIServiceMessageState creates a new mock instance.
func NewMockIServiceMessageState(ctrl *gomock.Controller) *MockIServiceMessageState {
	mock := &MockIServiceMessageState{ctrl: ctrl}
	mock.recorder = &MockIServiceMessageStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIServiceMessageState) EXPECT() *MockIServiceMessageStateMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockIServiceMessageState) SendMessage(message entity.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", message)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIServiceMessageStateMockRecorder) SendMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIServiceMessageState)(nil).SendMessage), message)
}
