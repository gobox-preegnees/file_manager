// Code generated by MockGen. DO NOT EDIT.
// Source: message.go

// Package message_broker_message is a generated GoMock package.
package message_broker_message

import (
	reflect "reflect"

	messagebroker "github.com/gobox-preegnees/file_manager/internal/adapters/message_broker"
	gomock "github.com/golang/mock/gomock"
)

// MockIMessageBroker is a mock of IMessageBroker interface.
type MockIMessageBroker struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageBrokerMockRecorder
}

// MockIMessageBrokerMockRecorder is the mock recorder for MockIMessageBroker.
type MockIMessageBrokerMockRecorder struct {
	mock *MockIMessageBroker
}

// NewMockIMessageBroker creates a new mock instance.
func NewMockIMessageBroker(ctrl *gomock.Controller) *MockIMessageBroker {
	mock := &MockIMessageBroker{ctrl: ctrl}
	mock.recorder = &MockIMessageBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIMessageBroker) EXPECT() *MockIMessageBrokerMockRecorder {
	return m.recorder
}

// PublishErr mocks base method.
func (m *MockIMessageBroker) PublishErr(arg0 messagebroker.PublishErrReqDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublishErr", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PublishErr indicates an expected call of PublishErr.
func (mr *MockIMessageBrokerMockRecorder) PublishErr(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishErr", reflect.TypeOf((*MockIMessageBroker)(nil).PublishErr), arg0)
}
