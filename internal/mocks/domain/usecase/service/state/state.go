// Code generated by MockGen. DO NOT EDIT.
// Source: file.go

// Package usecase_service_state is a generated GoMock package.
package usecase_service_state

import (
	context "context"
	reflect "reflect"

	repo "github.com/gobox-preegnees/file_manager/internal/adapters/dao"
	gomock "github.com/golang/mock/gomock"
)

// MockIDaoFile is a mock of IDaoFile interface.
type MockIDaoFile struct {
	ctrl     *gomock.Controller
	recorder *MockIDaoFileMockRecorder
}

// MockIDaoFileMockRecorder is the mock recorder for MockIDaoFile.
type MockIDaoFileMockRecorder struct {
	mock *MockIDaoFile
}

// NewMockIDaoFile creates a new mock instance.
func NewMockIDaoFile(ctrl *gomock.Controller) *MockIDaoFile {
	mock := &MockIDaoFile{ctrl: ctrl}
	mock.recorder = &MockIDaoFileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDaoFile) EXPECT() *MockIDaoFileMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockIDaoFile) DeleteFile(ctx context.Context, deleteFileReqDTO repo.DeleteFileReqDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, deleteFileReqDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockIDaoFileMockRecorder) DeleteFile(ctx, deleteFileReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockIDaoFile)(nil).DeleteFile), ctx, deleteFileReqDTO)
}

// FindAllFilesByOwnerOrFileId mocks base method.
func (m *MockIDaoFile) FindAllFilesByOwnerOrFileId(ctx context.Context, findAllFilesByOwnerReqDTO repo.FindAllFilesByOwnerOrFileIdReqDTO) (repo.FindAllFilesByOwnerOrFileIdRespDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllFilesByOwnerOrFileId", ctx, findAllFilesByOwnerReqDTO)
	ret0, _ := ret[0].(repo.FindAllFilesByOwnerOrFileIdRespDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllFilesByOwnerOrFileId indicates an expected call of FindAllFilesByOwnerOrFileId.
func (mr *MockIDaoFileMockRecorder) FindAllFilesByOwnerOrFileId(ctx, findAllFilesByOwnerReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllFilesByOwnerOrFileId", reflect.TypeOf((*MockIDaoFile)(nil).FindAllFilesByOwnerOrFileId), ctx, findAllFilesByOwnerReqDTO)
}

// RenameFile mocks base method.
func (m *MockIDaoFile) RenameFile(ctx context.Context, renameFileReqDTO repo.RenameFileReqDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFile", ctx, renameFileReqDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFile indicates an expected call of RenameFile.
func (mr *MockIDaoFileMockRecorder) RenameFile(ctx, renameFileReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFile", reflect.TypeOf((*MockIDaoFile)(nil).RenameFile), ctx, renameFileReqDTO)
}

// SaveFile mocks base method.
func (m *MockIDaoFile) SaveFile(ctx context.Context, saveFileReqDTO repo.SaveFileReqDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, saveFileReqDTO)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockIDaoFileMockRecorder) SaveFile(ctx, saveFileReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockIDaoFile)(nil).SaveFile), ctx, saveFileReqDTO)
}
