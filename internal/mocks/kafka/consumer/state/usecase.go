// Code generated by MockGen. DO NOT EDIT.
// Source: consumer.go

// Package kafka is a generated GoMock package.
package kafka

import (
	context "context"
	reflect "reflect"

	entity "github.com/gobox-preegnees/file_manager/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIStateUsecase is a mock of IStateUsecase interface.
type MockIStateUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIStateUsecaseMockRecorder
}

// MockIStateUsecaseMockRecorder is the mock recorder for MockIStateUsecase.
type MockIStateUsecaseMockRecorder struct {
	mock *MockIStateUsecase
}

// NewMockIStateUsecase creates a new mock instance.
func NewMockIStateUsecase(ctrl *gomock.Controller) *MockIStateUsecase {
	mock := &MockIStateUsecase{ctrl: ctrl}
	mock.recorder = &MockIStateUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStateUsecase) EXPECT() *MockIStateUsecaseMockRecorder {
	return m.recorder
}

// SetState mocks base method.
func (m *MockIStateUsecase) SetState(arg0 context.Context, arg1 entity.State) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetState", arg0, arg1)
}

// SetState indicates an expected call of SetState.
func (mr *MockIStateUsecaseMockRecorder) SetState(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetState", reflect.TypeOf((*MockIStateUsecase)(nil).SetState), arg0, arg1)
}
