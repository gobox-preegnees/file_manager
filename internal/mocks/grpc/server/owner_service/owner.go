// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package file_service is a generated GoMock package.
package file_service

import (
	context "context"
	reflect "reflect"

	repo "github.com/gobox-preegnees/file_manager/internal/adapters/dao"
	domain "github.com/gobox-preegnees/file_manager/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockIFileService is a mock of IFileService interface.
type MockIFileService struct {
	ctrl     *gomock.Controller
	recorder *MockIFileServiceMockRecorder
}

// MockIFileServiceMockRecorder is the mock recorder for MockIFileService.
type MockIFileServiceMockRecorder struct {
	mock *MockIFileService
}

// NewMockIFileService creates a new mock instance.
func NewMockIFileService(ctrl *gomock.Controller) *MockIFileService {
	mock := &MockIFileService{ctrl: ctrl}
	mock.recorder = &MockIFileServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileService) EXPECT() *MockIFileServiceMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockIFileService) DeleteFile(ctx context.Context, deleteFileReqDTO domain.DeleteFileReqDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, deleteFileReqDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockIFileServiceMockRecorder) DeleteFile(ctx, deleteFileReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockIFileService)(nil).DeleteFile), ctx, deleteFileReqDTO)
}

// GetFiles mocks base method.
func (m *MockIFileService) GetFiles(ctx context.Context, getFilesReqDTO domain.GetFilesReqDTO) ([]repo.FullFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx, getFilesReqDTO)
	ret0, _ := ret[0].([]repo.FullFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockIFileServiceMockRecorder) GetFiles(ctx, getFilesReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockIFileService)(nil).GetFiles), ctx, getFilesReqDTO)
}

// RenameFile mocks base method.
func (m *MockIFileService) RenameFile(ctx context.Context, renameFileReqDTO domain.RenameFileReqDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFile", ctx, renameFileReqDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFile indicates an expected call of RenameFile.
func (mr *MockIFileServiceMockRecorder) RenameFile(ctx, renameFileReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFile", reflect.TypeOf((*MockIFileService)(nil).RenameFile), ctx, renameFileReqDTO)
}

// SaveFile mocks base method.
func (m *MockIFileService) SaveFile(ctx context.Context, saveFileReqDTO domain.SaveFileReqDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, saveFileReqDTO)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockIFileServiceMockRecorder) SaveFile(ctx, saveFileReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockIFileService)(nil).SaveFile), ctx, saveFileReqDTO)
}

// MockIOwnerService is a mock of IOwnerService interface.
type MockIOwnerService struct {
	ctrl     *gomock.Controller
	recorder *MockIOwnerServiceMockRecorder
}

// MockIOwnerServiceMockRecorder is the mock recorder for MockIOwnerService.
type MockIOwnerServiceMockRecorder struct {
	mock *MockIOwnerService
}

// NewMockIOwnerService creates a new mock instance.
func NewMockIOwnerService(ctrl *gomock.Controller) *MockIOwnerService {
	mock := &MockIOwnerService{ctrl: ctrl}
	mock.recorder = &MockIOwnerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOwnerService) EXPECT() *MockIOwnerServiceMockRecorder {
	return m.recorder
}

// CreateOwner mocks base method.
func (m *MockIOwnerService) CreateOwner(ctx context.Context, createOwnerReqDTO domain.CreateOwnerReqDTO) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOwner", ctx, createOwnerReqDTO)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOwner indicates an expected call of CreateOwner.
func (mr *MockIOwnerServiceMockRecorder) CreateOwner(ctx, createOwnerReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOwner", reflect.TypeOf((*MockIOwnerService)(nil).CreateOwner), ctx, createOwnerReqDTO)
}

// DeleteOwner mocks base method.
func (m *MockIOwnerService) DeleteOwner(ctx context.Context, deleteOwnerReqDTO domain.DeleteOwnerReqDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOwner", ctx, deleteOwnerReqDTO)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwner indicates an expected call of DeleteOwner.
func (mr *MockIOwnerServiceMockRecorder) DeleteOwner(ctx, deleteOwnerReqDTO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwner", reflect.TypeOf((*MockIOwnerService)(nil).DeleteOwner), ctx, deleteOwnerReqDTO)
}
