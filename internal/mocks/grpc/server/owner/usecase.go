// Code generated by MockGen. DO NOT EDIT.
// Source: server.go

// Package grpc is a generated GoMock package.
package grpc

import (
	context "context"
	reflect "reflect"

	repo "github.com/gobox-preegnees/file_manager/internal/adapters/dao"
	entity "github.com/gobox-preegnees/file_manager/internal/domain/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockIFileUsecase is a mock of IFileUsecase interface.
type MockIFileUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIFileUsecaseMockRecorder
}

// MockIFileUsecaseMockRecorder is the mock recorder for MockIFileUsecase.
type MockIFileUsecaseMockRecorder struct {
	mock *MockIFileUsecase
}

// NewMockIFileUsecase creates a new mock instance.
func NewMockIFileUsecase(ctrl *gomock.Controller) *MockIFileUsecase {
	mock := &MockIFileUsecase{ctrl: ctrl}
	mock.recorder = &MockIFileUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileUsecase) EXPECT() *MockIFileUsecaseMockRecorder {
	return m.recorder
}

// DeleteFile mocks base method.
func (m *MockIFileUsecase) DeleteFile(ctx context.Context, identifier entity.Identifier, fileName, client string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFile", ctx, identifier, fileName, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFile indicates an expected call of DeleteFile.
func (mr *MockIFileUsecaseMockRecorder) DeleteFile(ctx, identifier, fileName, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFile", reflect.TypeOf((*MockIFileUsecase)(nil).DeleteFile), ctx, identifier, fileName, client)
}

// GetFiles mocks base method.
func (m *MockIFileUsecase) GetFiles(ctx context.Context, identifier entity.Identifier, ownerId, fileId int) ([]repo.FullFile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", ctx, identifier, ownerId, fileId)
	ret0, _ := ret[0].([]repo.FullFile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiles indicates an expected call of GetFiles.
func (mr *MockIFileUsecaseMockRecorder) GetFiles(ctx, identifier, ownerId, fileId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockIFileUsecase)(nil).GetFiles), ctx, identifier, ownerId, fileId)
}

// RenameFile mocks base method.
func (m *MockIFileUsecase) RenameFile(ctx context.Context, identifier entity.Identifier, oldFilName, newFileName, client string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameFile", ctx, identifier, oldFilName, newFileName, client)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameFile indicates an expected call of RenameFile.
func (mr *MockIFileUsecaseMockRecorder) RenameFile(ctx, identifier, oldFilName, newFileName, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameFile", reflect.TypeOf((*MockIFileUsecase)(nil).RenameFile), ctx, identifier, oldFilName, newFileName, client)
}

// SaveFile mocks base method.
func (m *MockIFileUsecase) SaveFile(ctx context.Context, identifier entity.Identifier, file entity.File, client string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveFile", ctx, identifier, file, client)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveFile indicates an expected call of SaveFile.
func (mr *MockIFileUsecaseMockRecorder) SaveFile(ctx, identifier, file, client interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveFile", reflect.TypeOf((*MockIFileUsecase)(nil).SaveFile), ctx, identifier, file, client)
}

// MockIOwnerUsecase is a mock of IOwnerUsecase interface.
type MockIOwnerUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIOwnerUsecaseMockRecorder
}

// MockIOwnerUsecaseMockRecorder is the mock recorder for MockIOwnerUsecase.
type MockIOwnerUsecaseMockRecorder struct {
	mock *MockIOwnerUsecase
}

// NewMockIOwnerUsecase creates a new mock instance.
func NewMockIOwnerUsecase(ctrl *gomock.Controller) *MockIOwnerUsecase {
	mock := &MockIOwnerUsecase{ctrl: ctrl}
	mock.recorder = &MockIOwnerUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOwnerUsecase) EXPECT() *MockIOwnerUsecaseMockRecorder {
	return m.recorder
}

// CreateOwner mocks base method.
func (m *MockIOwnerUsecase) CreateOwner(ctx context.Context, owner entity.Owner) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOwner", ctx, owner)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOwner indicates an expected call of CreateOwner.
func (mr *MockIOwnerUsecaseMockRecorder) CreateOwner(ctx, owner interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOwner", reflect.TypeOf((*MockIOwnerUsecase)(nil).CreateOwner), ctx, owner)
}

// DeleteOwner mocks base method.
func (m *MockIOwnerUsecase) DeleteOwner(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOwner", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOwner indicates an expected call of DeleteOwner.
func (mr *MockIOwnerUsecaseMockRecorder) DeleteOwner(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOwner", reflect.TypeOf((*MockIOwnerUsecase)(nil).DeleteOwner), ctx, id)
}
